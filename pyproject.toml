[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-job-scraper"
version = "0.1.0"
description = "Privacy-focused AI job scraper with intelligent extraction, local storage, and interactive dashboard"
authors = [{ name = "Bjorn Melin" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.12"
keywords = ["ai", "job-scraper", "langchain", "langgraph", "streamlit", "privacy-focused"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Core AI and LLM libraries
    "groq>=0.30.0,<1.0.0",
    "langchain-groq>=0.3.6,<1.0.0",
    "langgraph>=0.6.2,<1.0.0",
    "langgraph-checkpoint-sqlite>=2.0.11,<3.0.0",
    "openai>=1.98.0,<2.0.0",
    # Web scraping and HTTP
    "httpx>=0.28.1,<1.0.0",
    "python-jobspy>=1.1.82,<2.0.0",
    "scrapegraphai>=1.61.0,<2.0.0",
    "proxies>=1.6,<2.0.0",
    # Data processing - prefer Polars for better performance
    "pandas>=2.3.1,<3.0.0",
    # TODO: Consider migrating to polars for better performance
    # "polars>=0.20.0,<1.0.0",
    # Database and models
    "sqlmodel>=0.0.24,<1.0.0",
    "pydantic-settings>=2.10.1,<3.0.0",
    "alembic>=1.15.0,<2.0.0",
    # UI and CLI
    "streamlit>=1.47.1,<2.0.0",
    "typer>=0.16.0,<1.0.0",
    # Configuration and utilities
    "python-dotenv>=1.1.1,<2.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0,<9.0.0",
    "ruff>=0.12.0,<1.0.0",
    "mypy>=1.8.0,<2.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    "alembic>=1.14.0,<2.0.0",  # Database migrations
]

# Production dependencies for deployment
prod = [
    "uvicorn[standard]>=0.26.0,<1.0.0",
    "gunicorn>=21.2.0,<22.0.0",
]

# Optional high-performance data processing
data = [
    "polars>=1.0.0,<2.0.0",
    "pyarrow>=19.0.0,<22.0.0",
]

# Optional database connectors
database = [
    "psycopg2-binary>=2.9.0,<3.0.0",  # PostgreSQL
    "asyncpg>=0.29.0,<1.0.0",         # Async PostgreSQL
]

[project.urls]
Repository = "https://github.com/BjornMelin/ai-job-scraper"

[project.scripts]
ai-job-scraper = "src.app_cli:main"
ai-job-scrape = "src.scraper:app"
ai-job-seed = "src.seed:app"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.version]
path = "src/__init__.py"

[tool.uv]
# UV-specific configuration
python-downloads = "automatic"
python-preference = "managed"

[tool.uv.sources]
# Optional: specify custom package sources if needed

[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src", "tests"]
extend-exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable comprehensive rule sets for high code quality
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
    "D",   # pydocstyle
]

ignore = [
    # Docstring formatting (Google style conflicts)
    "D203", # 1 blank line required before class docstring (conflicts with D211)
    "D213", # Multi-line docstring summary should start at the second line (conflicts with Google style)
    "D107", # Missing docstring in __init__ (often not needed for simple classes)
    "D104", # Missing docstring in public package (not always needed)

    "EM101", # Exception must not use a string literal, assign to variable first

    # Pylint rules that can be too strict
    "PLR0913", # Too many arguments to function call (sometimes necessary)
    "PLR0912", # Too many branches (sometimes necessary for business logic)
    "PLR2004", # Magic value used in comparison (constants can be clear in context)
    "PLR0915", # Too many statements (sometimes necessary)

    # Security rules that can be too strict for local apps
    "S311", # Standard pseudo-random generators are not suitable for crypto
    "S605", # Starting a process with a shell (needed for some CLI tools)
    "S607", # Starting a process with a partial executable path

    # Type checking that may be too strict for AI/ML code
    "PGH003", # Use specific rule codes when ignoring type issues
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY301", # Abstract `raise` to an inner function
    
    # Performance rules that may conflict with readability
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    
    # Import conventions that may not apply to all libraries
    "ICN001", # Import conventions for certain packages
    
    # DateTime compatibility - prefer backward compatible timezone.utc
    "UP017", # Use datetime.UTC alias (we prefer timezone.utc for compatibility)

    # Formatter conflicts
    "COM812", # trailing comma (conflicts with formatter)
    "ISC001", # single line implicit string concatenation (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # assert usage (standard practice in pytest tests)
    "PLR2004", # Magic value used in comparison (test values are often magic)
    "D103",    # Missing docstring in public function (test functions don't always need docs)
    "ARG002",  # Unused method argument (pytest fixtures are injected even if not directly used)
]
"**/test_*.py" = [
    "S101",    # assert usage (standard practice in pytest tests)
    "PLR2004", # Magic value used in comparison (test values are often magic)
    "D103",    # Missing docstring in public function (test functions don't always need docs)
    "ARG002",  # Unused method argument (pytest fixtures are injected even if not directly used)
]
"seed.py" = [
    "T201", # print found (acceptable in seed scripts)
]
"app.py" = [
    "PLR0915", # Too many statements (Streamlit apps can be complex)
    "S106",    # Possible hardcoded password (false positives in UI code)
]
"__init__.py" = [
    "N999", # Invalid module name (package names can have dashes)
]
"tests/__init__.py" = [
    "N999", # Invalid module name (package names can have dashes)
]
"src/services/database_sync.py" = [
    "S324", # Use of insecure MD5 hash function (acceptable for non-cryptographic content fingerprinting)
]
"src/app_cli.py" = [
    "S603", # subprocess call with controlled input (safe CLI launcher)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["ai-job-scraper"]
force-single-line = false
lines-between-types = 1

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 60

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Third-party library stubs
[[tool.mypy.overrides]]
module = [
    "scrapegraphai.*",
    "python_jobspy.*",
    "proxies.*",
    "streamlit.*",
    "typer.*",
    "pandas.*",
    "polars.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Pylint configuration
[tool.pylint.main]
source-roots = ["src", "tests"]
py-version = "3.12"
jobs = 0  # Auto-detect CPU cores for parallel processing
recursive = true

[tool.pylint.messages_control]
# Enable comprehensive checks while allowing reasonable exceptions
disable = [
    # Import and module issues (handled by ruff)
    "import-error",  # Will be resolved by source-roots configuration
    "wrong-import-position",  # Handled by ruff/isort
    "relative-beyond-top-level",  # Relative imports in src layout
    "no-name-in-module",     # Module name detection issues
    
    # Documentation (handled by ruff/pydocstyle)
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    
    # Code style (handled by ruff/black)
    "line-too-long",
    "invalid-name",  # Variable naming handled by ruff
    
    # Overly restrictive checks
    "too-few-public-methods",  # Pydantic models often have few methods
    "too-many-arguments",      # Sometimes necessary for complex functions
    "too-many-locals",         # Sometimes necessary for data processing
    "too-many-branches",       # Sometimes necessary for business logic
    "too-many-statements",     # Sometimes necessary for complex operations
    
    # Allow pragmatic exception handling patterns
    "broad-exception-caught",  # Sometimes appropriate for robustness
    
    # Allow protected member access for SQLAlchemy patterns
    "protected-access",        # Common pattern in SQLAlchemy and similar libraries
    
    # Disable singleton comparison warnings for SQLAlchemy/SQLModel
    "singleton-comparison",    # SQLModel requires == True/False/None for queries
    
    # Disable no-member warnings for standard library modules
    "no-member",              # datetime.timezone.utc is valid in Python 3.12+
    
    # SQLAlchemy/SQLModel specific issues
    "not-callable",           # func.count() and similar SQLAlchemy func calls are falsely flagged as not callable
]

enable = [
    # Focus on logic and correctness issues
    "unused-variable",
    "unused-argument", 
    "undefined-variable",
    "attribute-defined-outside-init",
    # Note: singleton-comparison disabled for SQLAlchemy/SQLModel patterns
    # SQLModel requires == True/False/None for database queries, not is True/False/is None
    "no-else-raise",
    "no-else-return",
    "use-maxsplit-arg",
    "duplicate-code",
]

[tool.pylint.format]
max-line-length = 88  # Match ruff configuration

[tool.pylint.design]
# Allow reasonable complexity for AI/ML applications
max-args = 8
max-locals = 20  
max-branches = 15
max-statements = 60
max-public-methods = 25
min-public-methods = 1  # Allow single-method classes

[tool.pylint.similarities]
min-similarity-lines = 6
ignore-comments = true
ignore-docstrings = true
ignore-imports = true

[tool.pylint.typecheck]
# Ignore missing imports for third-party libraries without stubs
ignored-modules = [
    "scrapegraphai",
    "python_jobspy", 
    "proxies",
    "streamlit",
    "typer",
    "pandas",
    "polars",
    "groq",
    "openai",
    "langchain_groq",
    "langgraph",
]

[dependency-groups]
dev = [
    "pylint>=3.3.7",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
]

