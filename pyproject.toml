[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-job-scraper"
version = "0.1.0"
description = "Privacy-focused AI job scraper with intelligent extraction, local storage, and interactive dashboard"
authors = [{ name = "Bjorn Melin" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.12"
keywords = ["ai", "job-scraper", "langchain", "langgraph", "streamlit", "privacy-focused"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # AI and LLM
    "groq>=0.30.0,<1.0.0",
    "langchain-groq>=0.3.6,<1.0.0",
    "langgraph>=0.6.2,<1.0.0",
    "langgraph-checkpoint-sqlite>=2.0.11,<3.0.0",
    "openai>=1.98.0,<2.0.0",
    # Web scraping
    "httpx>=0.28.1,<1.0.0",
    "python-jobspy>=1.1.82,<2.0.0",
    "scrapegraphai>=1.61.0,<2.0.0",
    "proxies>=1.6,<2.0.0",
    # Data processing
    "pandas>=2.3.1,<3.0.0",
    # Database
    "sqlmodel>=0.0.24,<1.0.0",
    "pydantic-settings>=2.10.1,<3.0.0",
    "alembic>=1.15.0,<2.0.0",
    # UI and CLI
    "streamlit>=1.47.1,<2.0.0",
    "typer>=0.16.0,<1.0.0",
    # Utilities
    "python-dotenv>=1.1.1,<2.0.0",
    "price-parser>=0.4.0",
    "humanize>=4.12.3",
    "hatchling>=1.27.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "ruff>=0.12.0,<1.0.0",
    "mypy>=1.8.0,<2.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    "alembic>=1.15.0,<2.0.0",
]

prod = [
    "uvicorn[standard]>=0.26.0,<1.0.0",
    "gunicorn>=21.2.0,<22.0.0",
]

data = [
    "pyarrow>=19.0.0,<22.0.0",
]

database = [
    "psycopg2-binary>=2.9.0,<3.0.0",
    "asyncpg>=0.29.0,<1.0.0",
]

[project.urls]
Repository = "https://github.com/BjornMelin/ai-job-scraper"

[project.scripts]
ai-job-scraper = "src.app_cli:main"
ai-job-scrape = "src.scraper:app"
ai-job-seed = "src.seed:app"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.version]
path = "src/__init__.py"

[tool.uv]
python-downloads = "automatic"
python-preference = "managed"

# =============================================================================
# RUFF CONFIGURATION
# =============================================================================

[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src", "tests"]

extend-exclude = [
    ".venv",
    ".git",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "build",
    "dist",
    "node_modules",
    ".tox",
    ".nox",
]

[tool.ruff.lint]
select = [
    "E", "W", "F",  # pycodestyle, pyflakes
    "I", "TID",     # isort, tidy-imports
    "UP", "FLY", "FURB",  # modern Python patterns
    "S",            # security
    "TCH", "FA",    # type checking
    "B", "A", "C4", "PIE", "SIM", "PGH", "RUF",  # code quality
    "PERF",         # performance
    "TRY", "RSE", "EM",  # error handling
    "N", "ICN",     # naming conventions
    "ERA", "ARG", "PTH",  # cleanup
    "PT", "PD", "LOG",   # framework-specific
    "Q", "COM",     # formatting
    "D",            # documentation
    "DTZ", "RET", "G",   # datetime, returns, logging
    "PLC", "PLE", "PLW", "PLR09",  # selected pylint rules
]

ignore = [
    # Docstring formatting (Google style)
    "D203", "D213", "D107", "D104", "D100",
    # Exception handling (pragmatic patterns)
    "EM101", "EM102", "TRY003", "TRY301",
    # Complexity (reasonable for AI/ML)
    "PLR0913", "PLR0912", "PLR2004", "PLR0915", "PLR0911",
    # Security (local development)
    "S311", "S605", "S607", "S101",
    # Type checking (practical)
    "PGH003", "TC001", "TC002", "TC003",
    # Performance vs readability
    "PERF203", "PERF401",
    # Import conventions
    "ICN001",
    # Datetime compatibility
    "UP017",
    # Formatter conflicts
    "COM812", "ISC001", "W191", "E111", "E114", "E117",
    "Q000", "Q001", "Q002", "Q003",
    # Refurb false positives
    "FURB101", "FURB103",
    # Pandas context
    "PD002", "PD015",
    # Modern Python compatibility
    "UP038",
    # Project structure
    "N999",
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = ["ALL"]
unfixable = []
task-tags = ["TODO", "FIXME", "XXX", "BUG", "HACK", "NOTE"]

[tool.ruff.lint.per-file-ignores]
# Test files
"tests/**/*.py" = ["S101", "PLR2004", "D103", "D100", "ARG002", "TRY301", "S311", "PLR0913", "SIM117"]
"**/test_*.py" = ["S101", "PLR2004", "D103", "D100", "ARG002", "TRY301", "S311", "PLR0913", "SIM117"]

# Application files
"seed.py" = ["T201", "S311"]
"app.py" = ["PLR0915", "S106", "PLR0913", "C901"]
"src/app_cli.py" = ["S603", "T201", "PLR0912"]

# Initialization files
"__init__.py" = ["D104", "F401"]
"src/__init__.py" = ["D104", "F401"]
"tests/__init__.py" = ["D104"]

# Data/model files
"src/services/database_sync.py" = ["S324"]
"src/models.py" = ["S324", "PLR0913"]

# Migration/maintenance files
"alembic/versions/*.py" = ["D103", "INP001"]
"scripts/**/*.py" = ["T201", "S311", "PLR0913"]

# Enhanced rule configurations

[tool.ruff.lint.pydocstyle]
convention = "google"
property-decorators = ["functools.cached_property"]


[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing_extensions"]
quote-annotations = true
runtime-evaluated-base-classes = ["pydantic.BaseModel", "sqlmodel.SQLModel"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true
hardcoded-tmp-directory = ["/tmp", "/var/tmp", "/dev/shm"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "typer.Option", "typer.Argument"]

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["typing.List", "typing.Dict", "typing.Set", "typing.Tuple"]

[tool.ruff.lint.flake8-import-conventions.aliases]
"altair" = "alt"
"matplotlib.pyplot" = "plt"
"numpy" = "np"
"pandas" = "pd"
"polars" = "pl"
"seaborn" = "sns"
"streamlit" = "st"
"sqlalchemy" = "sa"
"httpx" = "httpx"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "tuple"
parametrize-values-type = "tuple"
parametrize-values-row-type = "tuple"
raises-require-match-for = ["requests.RequestException", "httpx.HTTPError"]


[tool.ruff.lint.flake8-tidy-imports.banned-api]
"cgi" = { msg = "The cgi module is deprecated." }
"imp" = { msg = "The imp module is deprecated in favor of importlib." }
"typing.Callable" = { msg = "Use collections.abc.Callable instead." }
"typing.Iterable" = { msg = "Use collections.abc.Iterable instead." }
"typing.Iterator" = { msg = "Use collections.abc.Iterator instead." }
"typing.Mapping" = { msg = "Use collections.abc.Mapping instead." }
"typing.Sequence" = { msg = "Use collections.abc.Sequence instead." }

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = false

[tool.ruff.lint.isort]
known-first-party = ["src", "ai-job-scraper"]
known-third-party = [
    "groq", "openai", "langchain", "langgraph",
    "httpx", "scrapegraphai", "python_jobspy",
    "pandas", "polars", "numpy",
    "sqlmodel", "sqlalchemy", "alembic",
    "streamlit", "typer", "pytest",
]
force-single-line = false
lines-between-types = 1
split-on-trailing-comma = true
from-first = false
length-sort = false
length-sort-straight = false
order-by-type = true
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 72
preview = false

# =============================================================================
# MYPY CONFIGURATION
# =============================================================================
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "scrapegraphai.*",
    "python_jobspy.*",
    "proxies.*",
    "streamlit.*",
    "typer.*",
    "pandas.*",
    "polars.*",
]
ignore_missing_imports = true

# =============================================================================
# PYTEST CONFIGURATION
# =============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "fast: marks tests as fast unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================
[tool.coverage.run]
source = ["src"]
branch = true
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# =============================================================================
# PYLINT CONFIGURATION
# =============================================================================
[tool.pylint.main]
source-roots = ["src", "tests"]
py-version = "3.12"
jobs = 0  # Auto-detect CPU cores for parallel processing
recursive = true

[tool.pylint.messages_control]
disable = [
    "import-error", "wrong-import-position", "relative-beyond-top-level", "no-name-in-module",
    "missing-module-docstring", "missing-class-docstring", "missing-function-docstring",
    "line-too-long", "invalid-name",
    "too-few-public-methods", "too-many-arguments", "too-many-locals",
    "too-many-branches", "too-many-statements",
    "broad-exception-caught", "protected-access", "singleton-comparison",
    "no-member", "not-callable",
]

enable = [
    "unused-variable", "unused-argument", "undefined-variable",
    "attribute-defined-outside-init", "no-else-raise", "no-else-return",
    "use-maxsplit-arg", "duplicate-code",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 8
max-locals = 20
max-branches = 15
max-statements = 60
max-public-methods = 25
min-public-methods = 1

[tool.pylint.similarities]
min-similarity-lines = 6
ignore-comments = true
ignore-docstrings = true
ignore-imports = true

[tool.pylint.typecheck]
ignored-modules = [
    "scrapegraphai", "python_jobspy", "proxies", "streamlit", "typer",
    "pandas", "polars", "groq", "openai", "langchain_groq", "langgraph",
]

[dependency-groups]
dev = [
    "psutil>=7.0.0",
    "pylint>=3.3.7",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.6.0", # For parallel test execution
    "pytest-benchmark>=4.0.0", # For performance testing
]

