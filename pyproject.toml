[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-job-scraper"
version = "0.1.0"
description = "Privacy-focused AI job scraper with intelligent extraction, local storage, and interactive dashboard"
authors = [{ name = "Bjorn Melin" }]
readme = "README.md"
license-files = ["LICENSE"]
requires-python = ">=3.12"
dependencies = [
    "groq==0.30.0",
    "httpx==0.28.1",
    "langgraph==0.6.2",
    "openai>=1.98.0",
    "pandas==2.3.1",
    "proxies==1.6",
    "pydantic-settings==2.10.1",
    "python-dotenv==1.1.1",
    "python-jobspy==1.1.82",
    "scrapegraphai==1.61.0",
    "sqlmodel==0.0.24",
    "streamlit>=1.47.1",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=0.23.0",
    "pytest>=8.0.0",
    "ruff>=0.10.0",
]

[project.urls]
Repository = "https://github.com/BjornMelin/ai-job-scraper"

[tool.setuptools]
py-modules = ["utils", "scraper_job_boards", "scraper", "models", "database", "config", "app", "seed"]

[tool.uv]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade
]
ignore = [
    # Docstring formatting (Google style conflicts)
    "D203", # 1 blank line required before class docstring (conflicts with D211)
    "D213", # Multi-line docstring summary should start at the second line (conflicts with Google style)
    "D107", # Missing docstring in __init__ (often not needed for simple classes)
    "D104", # Missing docstring in public package (not always needed)

    # Pylint rules that can be too strict
    "PLR0913", # Too many arguments to function call (sometimes necessary)
    "PLR0912", # Too many branches (sometimes necessary for business logic)
    "PLR2004", # Magic value used in comparison (constants can be clear in context)

    # Security rules that can be too strict for local apps
    "S605", # Starting a process with a shell (needed for some CLI tools)
    "S607", # Starting a process with a partial executable path

    # Complexity rules (keep some but not all)
    "PLR0915", # Too many statements (sometimes necessary)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # assert usage (standard practice in pytest tests)
    "ARG001",  # Unused function argument (fixtures often unused directly)
    "PLR2004", # Magic value used in comparison (test values are often magic)
    "D103",    # Missing docstring in public function (test functions don't always need docs)
]
"test_*.py" = [
    "S101",    # assert usage (standard practice in pytest tests)
    "PLR2004", # Magic value used in comparison (test values are often magic)
    "D103",    # Missing docstring in public function (test functions don't always need docs)
]
"seed.py" = [
    "T201", # print found (acceptable in seed scripts)
]
"app.py" = [
    "PLR0915", # Too many statements (Streamlit apps can be complex)
    "S106",    # Possible hardcoded password (false positives in UI code)
]
"__init__.py" = [
    "N999", # Invalid module name (package names can have dashes)
]
"tests/__init__.py" = [
    "N999", # Invalid module name (package names can have dashes)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["ai-job-scraper"]
force-single-line = false
lines-between-types = 1

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
